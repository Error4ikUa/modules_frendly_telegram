import os
import re
import logging
from datetime import datetime as dt

from telethon.tl.types import DocumentAttributeFilename
from pyppeteer import launch
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class WebScreenshotMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü"""

    strings = {
        "name": "WebScreenshot",
        "processing": "üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...",
        "error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "invalid_url": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL. –ü—Ä–∏–º–µ—Ä: https://example.com",
        "success": "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.",
    }

    def __init__(self):
        self.browser = None
        self.page = None
        self.screenshot_path = os.path.join(os.getcwd(), "screenshots")

    async def client_ready(self, client, db):
        self.client = client
        if not os.path.exists(self.screenshot_path):
            os.makedirs(self.screenshot_path)
        self.browser = await launch(headless=True, args=['--no-sandbox'])
        self.page = await self.browser.newPage()
        await self.page.setViewport({"width": 1280, "height": 720})

    @loader.command()
    async def screenshot(self, message):
        """
        .screenshot <URL>
        –°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        """
        args = utils.get_args_raw(message)
        if not args or not self._validate_url(args):
            await utils.answer(message, self.strings["invalid_url"])
            return

        await utils.answer(message, self.strings["processing"])
        try:
            file_name = self._generate_file_name(args)
            file_path = os.path.join(self.screenshot_path, file_name)
            await self.page.goto(args)
            await self.page.screenshot({"path": file_path, "fullPage": True})
            await self.client.send_file(
                message.peer_id,
                file_path,
                caption=self.strings["success"],
                attributes=[DocumentAttributeFilename(file_name)]
            )
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞:", exc_info=e)
            await utils.answer(message, self.strings["error"])

    def _validate_url(self, url):
        regex = r"(http|https)://[^\s/$.?#].[^\s]*"
        return re.match(regex, url)

    def _generate_file_name(self, url):
        clean_url = re.sub(r"[^\w]", "_", url)
        return f"{dt.now().strftime('%Y-%m-%d_%H-%M-%S')}_{clean_url}.png"

    async def on_unload(self):
        if self.browser:
            await self.browser.close()
