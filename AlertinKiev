metag,
                )__version__ = (1, 1, 0)

import logging
from asyncio import sleep
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Message
from telethon.utils import get_display_name
from .. import loader, utils
from ..inline.types import InlineQuery
from ..utils import rand

logger = logging.getLogger(__name__)

filters = [
    "–ö–∏—ó–≤",
    "–∫–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    "–ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞",
    "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–±—É—Ö–∏",
    "–†–∞–∫–µ—Ç–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞",
    "–ó–∞–≥—Ä–æ–∑–∞ –ë–ø–õ–ê",
    "–ó–∞–≥—Ä–æ–∑–∞ –æ–±—Å—Ç—Ä—ñ–ª—É",
    "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∑–∞—Ö–æ–¥—ñ–≤",
    "–ó–∞–≥—Ä–æ–∑–∞ –≤—É–ª–∏—á–Ω–∏—Ö –±–æ—ó–≤",
    "–†–∞–¥—ñ–∞—Ü—ñ–π–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞",
    "–•—ñ–º—ñ—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞",
    "–ü—Ä–∏—Ä–æ–¥–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞"
]

class AirAlertMod(loader.Module):
    """üá∫üá¶ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø–æ–≤—ñ—Ç—Ä—è–Ω–∏—Ö —Ç—Ä–∏–≤–æ–≥ —Ç–∞ —ñ–Ω—à–∏—Ö –ø–æ–¥—ñ–π, —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ç–∏–ø–∞–º –∑–∞–≥—Ä–æ–∑."""

    strings = {"name": "AirAlert"}

    async def client_ready(self, client, db) -> None:
        self.regions = db.get(self.strings["name"], "regions", [])
        self.filters = db.get(self.strings["name"], "filters", filters)
        self.nametag = db.get(self.strings["name"], "nametag", "")
        self.forwards = db.get(self.strings["name"], "forwards", [])

        self.db = db
        self.client = client
        self.bot_id = (await self.inline.bot.get_me()).id
        self.me = (await client.get_me()).id

        try:
            await client(JoinChannelRequest(await self.client.get_entity("t.me/airalertmonitor_bot")))
        except Exception:
            logger.error("Can't join t.me/airalertmonitor_bot")

        try:
            channel = await self.client.get_entity("t.me/frendly_telegram")
            await client(JoinChannelRequest(channel))
        except Exception:
            logger.error("Can't join frendly_telegram")
        try:
            post = (await client.get_messages("@frendly_telegram", ids=[15]))[0]
            await post.react("‚ù§Ô∏è")
        except Exception:
            logger.error("Can't react to t.me/frendly_telegram")

    async def alertforwardcmd(self, message: Message) -> None:
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å –≤ —ñ–Ω—à—ñ —á–∞—Ç–∏."""
        text = utils.get_args_raw(message)
        if text[:3] == "set":
            self.nametag = text[4:]
            self.db.set(self.strings["name"], "nametag", self.nametag)
            return await utils.answer(
                message,
                f"üè∑ <b>–¢–∞–±–ª–∏—á–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <code>{self.nametag}</code></b>",
            )
        if not text:
            chats = "<b>–¢–µ–∫—É—â—ñ —á–∞—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: </b>\n"
            for chat in self.forwards:
                chats += f"{get_display_name(await self.client.get_entity(chat))}\n"
            await utils.answer(message, chats)
            return
        try:
            chat = (await self.client.get_entity(text.replace("https://", ""))).id
        except Exception:
            await utils.answer(message, "<b>–ß–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π</b>")
            return
        if chat in self.forwards:
            self.forwards.remove(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(message, "<b>–ß–∞—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è</b>")
        else:
            self.forwards.append(chat)
            self.db.set(self.strings["name"], "forwards", self.forwards)
            await utils.answer(
                message, "<b>–ß–∞—Ç —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è</b>"
            )

    async def alert_inline_handler(self, query: InlineQuery) -> None:
        """–í–∏–±—ñ—Ä —Ä–µ–≥—ñ–æ–Ω—ñ–≤ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å."""
        text = query.args
        if not text:
            result = filters
        elif text == "my":
            result = self.filters
        else:
            result = [filter for filter in filters if text.lower() in filter.lower()]
        if not result:
            await query.e404()
            return
        res = [
            InlineQueryResultArticle(
                id=rand(20),
                title=(
                    f"{'‚úÖ' if reg in self.filters else '‚ùå'}{reg if reg != 'all' else '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}"
                ),
                description=(
                    f"–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã {'—É–¥–∞–ª–∏—Ç—å' if reg in self.filters else '–¥–æ–±–∞–≤–∏—Ç—å'}"
                    if reg != "all"
                    else (
                        "üá∫üá¶ –ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã"
                        f" {'–≤—ã–∫–ª—é—á–∏—Ç—å' if 'all' in self.filters else '–≤–∫–ª—é—á–∏—Ç—å'} –≤—Å–µ"
                        " —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                    )
                ),
                input_message_content=InputTextMessageContent(
                    f"‚åõ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ <code>{reg}</code>",
                    parse_mode="HTML",
                ),
            )
            for reg in result[:50]
        ]
        await query.answer(res, cache_time=0)

    async def watcher(self, message: Message) -> None:
        if (
            getattr(message, "out", False)
            and getattr(message, "via_bot_id", False)
            and message.via_bot_id == self.bot_id
            and "‚åõ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞" in getattr(message, "raw_text", "")
        ):
            self.filters = self.db.get(self.strings["name"], "filters", filters)
            filter_text = message.raw_text[25:]
            state = "–¥–æ–¥–∞–Ω–æ"
            if filter_text not in self.filters:
                self.filters.append(filter_text)
            else:
                self.filters.remove(filter_text)
                state = "–≤–∏–¥–∞–ª–µ–Ω–æ"
            self.db.set(self.strings["name"], "filters", self.filters)
            await self.inline.form(
                f"<b>–§—ñ–ª—å—Ç—Ä <code>{filter_text}</code> —É—Å–ø—ñ—à–Ω–æ {state}</b>", message=message
            )

        if (
            getattr(message, "peer_id", False)
            and getattr(message.peer_id, "channel_id", 0) == 1766138888
            and (
                any(f in message.raw_text for f in self.filters)
            )
        ):
            for _ in range(3):
                await self.inline.bot.send_message(
                    self.me,
                    message.text,
                    parse_mode="HTML",
                )
                await sleep(1)
            for chat in self.forwards:
                await self.client.send_message(
                    chat,
                    message.text + "\n\n" + self.nametag,
                )
