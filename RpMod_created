# –∞–≤—Ç–æ—Ä: @Djdkxkxys
–ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å –∏–º–ø–æ—Ä—Ç–∞
–ø—ã—Ç–∞—Ç—å—Å—è:
    –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏
–ö—Ä–æ–º–µ:
    mod_inst = subprocess.Popen ("pip install emoji", shell = True) 
    mod_inst.wait ()
    –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏
from .. import loader, utils
—Å—Ç—Ä–æ–∫–∞ –∏–º–ø–æ—Ä—Ç–∞

@ loader.tds
–∫–ª–∞—Å—Å RPMod (loader.Module):
    "" "–ú–æ–¥—É–ª—å RPMod + –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. + –†–µ–ø–ª–∏–∫–∞. (–£–∫–∞–∑—ã–≤–∞—Ç—å —Ä–µ–ø–ª–∏–∫—É –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ)" ""
    strings = {'–∏–º—è': 'RPMod'}

    async def client_ready (self, client, db):
        self.db = db
        –µ—Å–ª–∏ –Ω–µ self.db.get ("RPMod", "exlist", False):
            exlist = []
            self.db.set ("RPMod", "exlist", exlist)
        –µ—Å–ª–∏ –Ω–µ self.db.get ("RPMod", "status", False):
            self.db.get ("RPMod", "—Å—Ç–∞—Ç—É—Å", 1)
        –µ—Å–ª–∏ –Ω–µ self.db.get ("RPMod", "rprezjim", False):
            self.db.set ("RPMod", "rprezjim", 1)
        –µ—Å–ª–∏ –Ω–µ self.db.get ('RPMod', 'rpnick', False):
            –º–Ω–µ = (–∂–¥–∞—Ç—å client.get_me ())
            self.db.set ('RPMod', 'rpnick', me.first_name)
        –µ—Å–ª–∏ –Ω–µ self.db.get ('RPMod', 'rpcomands', False):
            comands = {'—á–º–æ–∫': '—á–º–æ–∫–Ω—É–ª', '–∫—É—Å—å': '–∫—É—Å—å–Ω—É–ª', '–ø–∏—Ü': '—Ä–∞–¥–æ—Å—Ç–Ω—ã–µ –∑–≤—É–∫–∏ –ø–∏—Ç—Å—ã', '–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å': '–ø–æ—Ü–µ–ª–æ–≤–∞–ª', '—Ä—Ä—Ä': '–∑–ª—ã–µ –∑–≤—É–∫–∏ –ø–∏—Ç—Å—ã', '–≤—ã–µ–±–∞—Ç—å' : –≤—ã–µ–±–∞–ª, —Ç—Ä–∞—Ö–Ω—É—Ç—å: —Ç—Ä–∞—Ö–Ω—É–ª, –≤—ã–ø–æ—Ä–æ—Ç—å: –≤—ã–ø–æ—Ä–æ–ª, —à–ª–µ–ø–Ω—É—Ç—å: —à–ª–µ–ø–Ω—É–ª, –æ—Ç–ª–∏–∑–∞—Ç—å: –æ—Ç–ª–∏–∑–∞–ª —É, –ø—Ä–∏–∂–∞—Ç—å: –ø—Ä–∏–∂–∞–ª, –ø–æ–≥–ª–∞–¥–∏—Ç—å: '–ø–æ–≥–ª–∞–¥–∏–ª', '–¥–∞.': '–ø–∏–∑–¥–∞', '–≥–¥–µ.': '–≤ –ø–∏–∑–¥–µ', '–Ω–µ—Ç.': '–ø–∏–¥–æ—Ä–∞ –æ—Ç–≤–µ—Ç', '–±—ã–≤–∞–µ—Ç.': '–Ω—É —ç—Ç–æ –ø–∏–∑–¥–µ—Ü –∫–æ–Ω–µ—á–Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ', '–º—Ä—Ä . ':' –º—É—Ä—á–∞–Ω–∏–µ –ø–∏—Ç—Å—ã ',' —Ä—Ä—Ä—Ä—Ä. ':' –∑–ª–∞—è –ø–∏—Ç—Å–∞ ',' –æ–±–Ω—è—Ç—å ':' –æ–±–Ω—è–ª '}
            self.db.set ('RPMod', 'rpcomands', –∫–æ–º–∞–Ω–¥—ã)
        –µ—Å–ª–∏ –Ω–µ self.db.get ('RPMod', 'rpemoji', False):
            emojiComands = {'–ª–∏–∑—å': 'üëÖ'}
            self.db.set ('RPMod', 'rpemoji', emojiComands)

    async def dobrpcmd (self, message):
        "" "–ò—Å–ø–æ–ª—å–∑—É–π: .dobrp (–∫–æ–º–∞–Ω–¥–∞) / (–¥–µ–π—Å—Ç–≤–∏–µ) / (—ç–º–æ–¥–∑–∏) —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–Ω–æ –∏ –±–µ–∑ —ç–º–æ–¥–∑–∏ (–Ω–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è). –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–æ–º–∞–Ω–¥—ã." ""
        await message.edit ('<code> –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è ... </coode>')
        args = utils.get_args_raw (—Å–æ–æ–±—â–µ–Ω–∏–µ)
        dict_rp = self.db.get ('RPMod', 'rpcomands')
        dict_rp_copy = dict_rp.copy ()
        –ø—ã—Ç–∞—Ç—å—Å—è:
            key_rp = str (args.split ('/') [0]). strip ()
            value_rp = str (args.split ('/', maxsplit = 2) [1]). strip ()
            lenght_args = []
            –¥–ª—è i –≤ args.split ('/'):
                lenght_args.append (i)
            count_emoji = 0
            
            –µ—Å–ª–∏ len (lenght_args)> = 3:
                emoji_rp = str (args.split ('/', maxsplit = 2) [2]). strip ()
                dict_emoji_rp = self.db.get ('RPMod', 'rpemoji')
                dict_emoji_rp_copy = dict_emoji_rp.copy ()
                r = emoji_rp
                lst = []
                count_emoji = 1
                –¥–ª—è x –≤ r:
                    –µ—Å–ª–∏ x –≤ emoji.UNICODE_EMOJI ['ru']. keys (): lst.append (x)
                    –µ—Å–ª–∏ x.isalpha () –∏–ª–∏ x.isspace () –∏–ª–∏ x.isdigit () –∏–ª–∏ x –≤ string.punctuation:
                        await message.edit (f "<b> –ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ (–ø—Ä–æ–±–µ–ª —Ç–æ–∂–µ —Å–∏–º–≤–æ–ª). </b>")
                        –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                –µ—Å–ª–∏ len (lst)> 3:
                    await message.edit (f "<b> –ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª–µ–µ 3 —ç–º–æ–¥–∑–∏. </b>")
                    –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                –µ—Å–ª–∏ –Ω–µ emoji_rp –∏–ª–∏ –Ω–µ emoji_rp.strip ():
                    await message.edit (f "<b> –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è —ç–º–æ–¥–∑–∏ –µ—Å—Ç—å, –∞ –∏—Ö –Ω–µ—Ç? —Ö–º. </b>")
                    –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                –µ—Å–ª–∏ len (lst) == 0:
                    await message.edit (f "<b> –í 3 —Å–µ–∫—Ü–∏–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —ç–º–æ–¥–∑–∏. –ï—Å–ª–∏ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã —ç–º–æ–¥–∑–∏, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫: </b> @ trololo_1")
                    –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                
        
            key_len = [len (x) –≤–º–µ—Å—Ç–æ x –≤ key_rp.split ()]
        
            –µ—Å–ª–∏ len (dict_rp)> = 70:
                await message.edit ('<b> –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–ø –∫–æ–º–∞–Ω–¥. </b>')
            –µ—â–µ:
                –µ—Å–ª–∏ –Ω–µ key_rp –∏–ª–∏ –Ω–µ—Ç key_rp.strip ():
                    await message.edit ('<b> –í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã. </b>')
                –µ—â–µ:
                    –µ—Å–ª–∏ –Ω–µ value_rp –∏–ª–∏ –Ω–µ value_rp.strip ():
                        await message.edit ('<b> –í—ã –Ω–µ –≤–≤–µ–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ä–ø –∫–æ–º–∞–Ω–¥—ã. </b>')
                    –µ—â–µ:
                        –µ—Å–ª–∏ int (len (key_len))> 1:
                            await message.edit ('<b> –í –∫–∞—á–µ—Å—Ç–≤–µ —Ä–ø –∫–æ–º–∞–Ω–¥—ã –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞. </b>')
                        –µ—â–µ:
                            –µ—Å–ª–∏ key_rp == 'all':
                                await message.edit ('<b> –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \' <code> –≤—Å–µ </code> \ '–≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ! </b>')
                            –µ—â–µ:
                                –µ—Å–ª–∏ count_emoji == 1:
                                    dict_emoji_rp_copy [key_rp] = emoji_rp
                                    dict_rp_copy [key_rp] = value_rp
                                    self.db.set ('RPMod', 'rpcomands', dict_rp_copy)
                                    self.db.set ('RPMod', 'rpemoji', dict_emoji_rp_copy)
                                    await message.edit (f '<b> –ö–æ–º–∞–Ω–¥–∞ \' <code> {key_rp} </code> \ '—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚Äã‚Äã—Å —ç–º–æ–¥–∑–∏ \' {emoji_rp} \ '! </b>')
                                –µ—â–µ:
                                     dict_rp_copy [key_rp] = value_rp
                                     self.db.set ('RPMod', 'rpcomands', dict_rp_copy)
                                     await message.edit (f '<b> –ö–æ–º–∞–Ω–¥–∞ \' <code> {key_rp} </code> \ '—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! </b>')
        –ö—Ä–æ–º–µ:
            await message.edit ('<b> –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å /, –ª–∏–±–æ –≤–æ–≤—Å–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª–∏. </b>')

    async def delrpcmd (self, message):
        "" "–ò—Å–ø–æ–ª—å–∑—É–π: .delrp (–∫–æ–º–∞–Ω–¥–∞) —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. \ N –ò—Å–ø–æ–ª—å–∑—É–π: .delrp all, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã." ""
        await message.edit ('–ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª—è–µ—Ç—Å—è ..')
        args = utils.get_args_raw (—Å–æ–æ–±—â–µ–Ω–∏–µ)
        dict_rp = self.db.get ('RPMod', 'rpcomands')
        dict_emoji_rp = self.db.get ('RPMod', 'rpemoji')
        dict_emoji_rp_copy = dict_emoji_rp.copy ()
        dict_rp_copy = dict_rp.copy ()
        
        key_rp = str (–∞—Ä–≥—É–º–µ–Ω—Ç—ã)
        count = 0
        –µ—Å–ª–∏ key_rp == 'all':
            dict_rp_copy.clear ()
            dict_emoji_rp_copy.clear ()
            self.db.set ('RPMod', 'rpcomands', dict_rp_copy)
            self.db.set ('RPMod', 'rpemoji', dict_emoji_rp_copy)
            await message.edit ('<b> –°–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥ –æ—á–∏—â–µ–Ω. </b>')
            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
        –µ—Å–ª–∏ –Ω–µ key_rp –∏–ª–∏ –Ω–µ key_rp.strip ():
            await message.edit ('<b> –í—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É </b>')
        –µ—â–µ:
            –ø—ã—Ç–∞—Ç—å—Å—è:
                –¥–ª—è i –≤ dict_emoji_rp_copy:
                    –µ—Å–ª–∏ —è == key_rp:
                        count = 1
                        –ø–µ—Ä–µ—Ä—ã–≤
                –µ—Å–ª–∏ count == 1:
                    dict_rp_copy.pop (key_rp)
                    dict_emoji_rp_copy.pop (key_rp)
                    self.db.set ('RPMod', 'rpcomands', dict_rp_copy)
                    self.db.set ('RPMod', 'rpemoji', dict_emoji_rp_copy)
                –µ—â–µ:
                    dict_rp_copy.pop (key_rp)
                    self.db.set ('RPMod', 'rpcomands', dict_rp_copy)
                await message.edit (f '<b> –ö–æ–º–∞–Ω–¥–∞ \' <code> {key_rp} </code> \ '—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! </b>')
            –∫—Ä–æ–º–µ KeyError:
                await message.edit ('<b> –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. </b>')

    async def rpmodcmd (self, message):
        "" "–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å / –≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º RP. \ N–ò—Å–ø–æ–ª—å–∑—É–π: .rpmod toggle, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å." ""
        status = self.db.get ("RPMod", "—Å—Ç–∞—Ç—É—Å")
        rezjim = self.db.get ("RPMod", "rprezjim")
        args = utils.get_args_raw (—Å–æ–æ–±—â–µ–Ω–∏–µ)
        –µ—Å–ª–∏ –Ω–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:
            –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å == 1:
                self.db.set ("RPMod", "—Å—Ç–∞—Ç—É—Å", 2)
                await message.edit ("<b> –†–µ–∂–∏–º RP <code> –≤—ã–∫–ª—é—á–µ–Ω </code> </b>")
            –µ—â–µ:
                self.db.set ("RPMod", "—Å—Ç–∞—Ç—É—Å", 1)
                await message.edit ("<b> –†–µ–∂–∏–º RP <code> –≤–∫–ª—é—á–µ–Ω </code> </b>")
        elif args.strip () == '–ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å':
            –µ—Å–ª–∏ rezjim == 1:
                self.db.set ("RPMod", "rprezjim", 2)
                await message.edit ("<b> –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code> –æ—Ç–ø—Ä–∞–≤–∫—É —Å–º—Å. </code> </b>")
            –µ—â–µ:
                self.db.set ("RPMod", "rprezjim", 1.)
                await message.edit ("<b> –†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <code> –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–º—Å. </code> </b>")
        –µ—â–µ:  	
            await message.edit ('–ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ ..')

    async def rplistcmd (self, message):
        "" "–ò—Å–ø–æ–ª—å–∑—É–π: .rplist —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–ø –∫–æ–º–∞–Ω–¥." ""
        com = self.db.get ('RPMod', 'rpcomands')
        emojies = self.db.get ('RPMod', 'rpemoji')
        l = len (com)
        
        listComands = f'–£ –≤–∞—Å —Ä–ø –∫–æ–º–∞–Ω–¥: <b> {l} </b> –∏–∑ <b> 70 </b>. '
        –µ—Å–ª–∏ len (com) == 0:
            await message.edit ('<b> –£–≤—ã, —É –≤–∞—Å –Ω–µ—Ç—É —Ä–ø –∫–æ–º–∞–Ω–¥. :( </b>')
            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
        –¥–ª—è –º–µ–Ω—è –≤ com:
            –µ—Å–ª–∏ —è –≤ emojies.keys ():
                listComands + = f '\ n ‚Ä¢ <b> <code> {i} </code> - {com [i]} | </b> {emojies [i]}'
            –µ—â–µ:
                listComands + = f '\ n ‚Ä¢ <b> <code> {i} </code> - {com [i]} </b>'
        –æ–∂–∏–¥–∞–Ω–∏–µ message.edit (listComands)

    async def rpnickcmd (self, message):
        "–ò—Å–ø–æ–ª—å–∑—É–π: .rpnick (–Ω–∏–∫), —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫. –ï—Å–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç–æ –≤–µ—Ä–Ω—ë—Ç—Å—è –Ω–∏–∫ –∏–∑ —Ç–≥."
        r = utils.get_args_raw (—Å–æ–æ–±—â–µ–Ω–∏–µ) .strip ()
        –µ—Å–ª–∏ –Ω–µ r:
            –º–Ω–µ = (–∂–¥–∞—Ç—å message.client.get_me ())
            self.db.set ('RPMod', 'rpnick', me.first_name)
            await message.edit (f "<b> –ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {me.first_name} </b>")
            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
        lst = []
        –Ω–∏–∫ = ''
        –¥–ª—è x –≤ r:
            –µ—Å–ª–∏ x –≤ emoji.UNICODE_EMOJI ['ru']. keys (): lst.append (x)
            –µ—Å–ª–∏ x –Ω–µ—Ç –≤ emoji.UNICODE_EMOJI ['ru']. keys (): nick + = x
        –µ—Å–ª–∏ len (lst)> 3:
            await message.edit (f "<b> –ù–∏–∫ '{r}' —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª–µ–µ —Ç—Ä—ë—Ö —ç–º–æ–¥–∑–∏. </b>")
        –µ—â–µ:
            –µ—Å–ª–∏ len (lst) + len (–Ω–∏–∫)> = 45:
                await message.edit (f "<b> –ù–∏–∫ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç –≤ 45 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ —ç–º–æ–¥–∑–∏ –¥–ª–∏–Ω—ã –±–æ–ª–µ–µ 1 —Å–∏–º–≤–æ–ª–æ–≤). </b>")
            –µ—â–µ:
                self.db.set ('RPMod', 'rpnick', r)
                await message.edit (f "<b> –ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {r} </b>")
    async def rpbackcmd (self, message):
        "–ò—Å–ø–æ–ª—å–∑—É–π: .rpback, —á—Ç–æ–±—ã –≤—ã–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö —Ä–ø –∫–æ–º–∞–Ω–¥. \ N–ò—Å–ø–æ–ª—å–∑—É–π .rpback / (—Å–ø–∏—Å–æ–∫ —á—å–∏—Ö —Ç–æ –∫–æ–º–∞–Ω–¥) / (—Å–ø–∏—Å–æ–∫ —á—å–∏—Ö —Ç–æ —ç–º–æ–¥–∑–∏), —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±–µ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥. –ú–æ–∂–Ω–æ –±–µ–∑ —ç–º–æ–¥–∑–∏, –Ω–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
        args = utils.get_args_raw (—Å–æ–æ–±—â–µ–Ω–∏–µ) .strip ()
        comand = self.db.get ('RPMod', 'rpcomands')
        emojies = self.db.get ('RPMod', 'rpemoji')
        –µ—Å–ª–∏ –Ω–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:
            –µ—Å–ª–∏ len (comand) == 0:
                await message.edit ('<b> –£ –≤–∞—Å –Ω–µ—Ç —Ä–ø –∫–æ–º–∞–Ω–¥. </b>')
            —ç–ª–∏—Ñ –ª–µ–Ω (—Å–º–∞–π–ª–∏–∫–∏) == 0:
                –æ–∂–∏–¥–∞–Ω–∏–µ message.edit (f '<code> .rpback / {comand} </code>')
            –µ—â–µ:
                –æ–∂–∏–¥–∞–Ω–∏–µ message.edit (f '<code> .rpback / {comand} / {emojies} </code>')
        –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:
            –ø—ã—Ç–∞—Ç—å—Å—è:
                comands = str (args.split ('/') [1]). strip ()
                
                lenght_args = []
                –¥–ª—è i –≤ args.split ('/'):
                    lenght_args.append (i)
                count_emoji = 0
                
                –µ—Å–ª–∏ len (lenght_args)> = 3:
                    emoji_rp = str (args.split ('/') [2]). strip ()
                    count_emoji = 1
                    emj = eval (emoji_rp)
                    –µ—Å–ª–∏ –Ω–µ dict == type (emj):
                        await message.edit ('<b> –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–µ–∫—Ü–∏–∏ —ç–º–æ–¥–∑–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º (—Å–ª–æ–≤–∞—Ä—ë–º –≤ –ø–∏—Ç–æ–Ω–µ). </b>')
                    –µ—â–µ:
                        –µ—Å–ª–∏ len (emj) == 0:
                            await message.edit ('<b> –°–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏ –ø—É—Å—Ç. </b>')
                            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                        –¥–ª—è x –≤ emj.values ‚Äã‚Äã():
                            lst = []
                            –µ—Å–ª–∏ x –≤ emoji.UNICODE_EMOJI ['ru']. keys (): lst.append (x)
                            –µ—Å–ª–∏ –Ω–µ x –∏–ª–∏ –Ω–µ x.strip ():
                                await message.edit (f "<b> –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö —ç–º–æ–¥–∑–∏? –î–∞ —Ç—ã –≥–µ–Ω–∏–π. </b>")
                                –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                            –µ—Å–ª–∏ x.isalpha () –∏–ª–∏ x.isspace () –∏–ª–∏ x.isdigit () –∏–ª–∏ x –≤ string.punctuation:
                                await message.edit (f "<b> –ë—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –≤ —Å–ø–æ—Å–æ–± –¥–ª—è —ç–º–æ–¥–∑–∏ (–ø—Ä–æ–±–µ–ª —Ç–æ–∂–µ —Å–∏–º–≤–æ–ª). </b>")
                                –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                            –µ—Å–ª–∏ len (lst)> 3:
                                await message.edit (f "<b> –ë—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª–µ–µ 3 —ç–º–æ–¥–∑–∏ –≤ —Å–ø–æ—Å–æ–± –¥–ª—è —ç–º–æ–¥–∑–∏. </b>")
                                –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                            
                            
                        –¥–ª—è x –≤ emj:
                            key_len = [len (l) –≤–º–µ—Å—Ç–æ l –≤ x.split ()]
                            –µ—Å–ª–∏ int (len (key_len))> 1:
                                await message.edit ('<b> –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ —Å–ø–æ—Å–æ–± —ç–º–æ–¥–∑–∏. </b>')
                                –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                            –µ—Å–ª–∏ –Ω–µ x –∏–ª–∏ –Ω–µ x.strip ():
                                await message.edit (f "<b> –ü—É—Å—Ç–æ–π –∫–ª—é—á –≤ —Å–ø–æ—Å–æ–± –¥–ª—è —ç–º–æ–¥–∑–∏? –î–∞ —Ç—ã —É–º–Ω–∏—á–∫–∞. </b>")
                                –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                com = eval (–∫–æ–º–∞–Ω–¥—ã)
                –µ—Å–ª–∏ dict == type (com):
                    –µ—Å–ª–∏ len (com) == 0:
                            await message.edit ('<b> –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç. </b>')
                            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                    –¥–ª—è x –≤ com:
                        key_len_cmd = [len (l) –¥–ª—è l –≤ x.split ()]
                        –µ—Å–ª–∏ int (len (key_len_cmd))> 1:
                            await message.edit ('<b> –í –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –∫–æ–º–∞–Ω–¥. </b>')
                            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                        –µ—Å–ª–∏ –Ω–µ x –∏–ª–∏ –Ω–µ x.strip ():
                            await message.edit (f "<b> –ü—É—Å—Ç–æ–π –∫–ª—é—á –≤ —Å–ø–æ—Å–æ–± –¥–ª—è –∫–æ–º–∞–Ω–¥? –ú–æ–π —Ö–æ—Ä–æ—à–∏–π, —Ç–∞–∫ –¥–µ–ª–∞ –Ω–µ –¥–µ–ª–∞—é—Ç—Å—è. </b>")
                            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                    –¥–ª—è x –≤ com.values ‚Äã‚Äã():
                        –µ—Å–ª–∏ –Ω–µ x –∏–ª–∏ –Ω–µ x.strip ():
                            await message.edit (f "<b> –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–æ—Å–æ–±–µ –¥–ª—è –∫–æ–º–∞–Ω–¥? –ù–µ —Å–µ–≥–æ–¥–Ω—è, –º–æ–π –∑–æ–ª–æ—Ç–æ–π. </b>")
                            –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
                    –µ—Å–ª–∏ count_emoji == 1:
                        comand_copy = comand.copy ()
                        emojies_copy = emojies.copy ()
                        merge_emj = {** emojies_copy, ** emj}
                        merge_com = {** comand_copy, ** com}
                        self.db.set ('RPMod', 'rpcomands', merge_com)
                        self.db.set ('RPMod', 'rpemoji', merge_emj)
                        await message.edit (f "<b> –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏ —Å–ª–æ–≤–∞—Ä—è –∏ —ç–º–æ–¥–∑–∏! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ–º–∞–Ω–¥–µ '<code> .rplist </code>'. </b>")
                    –µ—â–µ:
                        comand_copy = comand.copy ()
                        merge_com = {** comand_copy, ** com}
                        self.db.set ('RPMod', 'rpcomands', merge_com)
                        await message.edit (f "<b> –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏ —Å–ª–æ–≤ –∫–æ–º–∞–Ω–¥! –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ–º–∞–Ω–¥–µ '<code> .rplist </code>'. </b>")
                –µ—â–µ:
                    await message.edit (f "<b> –°–∏–Ω—Ç–∞–∫—Å–∏—Å —Å–µ–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º (—Å–ª–æ–≤–∞—Ä—ë–º –≤ –ø–∏—Ç–æ–Ω–µ). </b>")
            –ö—Ä–æ–º–µ:
                await message.edit (f "<b> –ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ /.\n–õ–∏–±–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å. (–ª–∏–±–æ –≤–æ–æ–±—â–µ –ø—É—Å—Ç–æ) </b>")
                
            
    async def rpblockcmd (self, message):
        "" "–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock, —á—Ç–æ–±—ã / —É–¥–∞–ª–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ). \ N–ò—Å–ø–æ–ª—å–∑—É–π: .rpblock list, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á–∞—Ç—ã –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö. \ N–ò—Å–ø–æ–ª—å–∑—É–π .rpblock (–∏–¥) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π." ""
        args = utils.get_args_raw (—Å–æ–æ–±—â–µ–Ω–∏–µ)
        ex = self.db.get ("RPMod", "exlist")
        ex_copy = ex.copy ()
        –µ—Å–ª–∏ –Ω–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã:
            a = –∂–¥–∞—Ç—å message.client.get_entity (message.to_id)
            –µ—Å–ª–∏ a.id –≤ ex_copy:
                ex_copy.remove (a.id)
                self.db.set ("RPMod", "exlist", ex_copy)
                –ø—ã—Ç–∞—Ç—å—Å—è:
                    name = a.title
                –ö—Ä–æ–º–µ:
                    name = a.first_name
                await message.edit (f '<i> –ß–∞—Ç <b> <u> {name} </u> </b> (<code> {a.id} </code>) —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π. </i> ')
            –µ—â–µ:
                ex_copy.append (a.id)
                self.db.set ("RPMod", "exlist", ex_copy)
                –ø—ã—Ç–∞—Ç—å—Å—è:
                    name = a.title
                –ö—Ä–æ–º–µ:
                    name = a.first_name
                await message.edit (f '<i> –ß–∞—Ç <b> <u> {name} </u> </b> (<code> {a.id} </code>) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. </i> ')
        elif args.isdigit ():
            args = args.strip ()
            args = int (–∞—Ä–≥—É–º–µ–Ω—Ç—ã)
            –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ ex_copy:
                a = –∂–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.client.get_entity (–∞—Ä–≥—É–º–µ–Ω—Ç—ã)
                ex_copy.remove (–∞—Ä–≥—É–º–µ–Ω—Ç—ã)
                self.db.set ("RPMod", "exlist", ex_copy)
                –ø—ã—Ç–∞—Ç—å—Å—è:
                    name = a.title
                –ö—Ä–æ–º–µ:
                    name = a.first_name
                await message.edit (f '<i> –ß–∞—Ç <b> <u> {name} </u> </b> (<code> {args} </code>) —É–¥–∞–ª–µ–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π. </i>')
            –µ—â–µ:
                await message.edit (f '<b> –ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥. </b>')
        elif args == '—Å–ø–∏—Å–æ–∫':
            ex_len = len (ex_copy)
            –µ—Å–ª–∏ ex_len == 0:
                await message.edit (f '<b> –°–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø—É—Å—Ç. </b>')
                –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
            sms = f '<i> –ß–∞—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö ({ex_len}): </i>'
            –¥–ª—è i –≤ ex_copy:
                a = –∂–¥–∞—Ç—å message.client.get_entity (i)
                –ø—ã—Ç–∞—Ç—å—Å—è:
                    name = a.title
                –ö—Ä–æ–º–µ:
                    name = a.first_name
                sms + = f '\ n ‚Ä¢ <b> <u> {name} </u> </b> (<code> {i} </code>)'
            –∂–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–º—Å)
        –µ—â–µ:
            await message.edit ('–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ..')
                
    async def watcher (—Å–∞–º, —Å–æ–æ–±—â–µ–Ω–∏–µ):
        –ø—ã—Ç–∞—Ç—å—Å—è:
            status = self.db.get ("RPMod", "—Å—Ç–∞—Ç—É—Å")
            comand = self.db.get ('RPMod', 'rpcomands')
            rezjim = self.db.get ('RPMod', 'rprezjim')
            emojies = self.db.get ('RPMod', 'rpemoji')
            –Ω–∏–∫ = self.db.get ('RPMod', 'rpnick')
            ex = self.db.get ("RPMod", "exlist")

            args = message.text.lower ()
            –º–Ω–µ = (–∂–¥–∞—Ç—å message.client.get_me ())
            chat_rp = –∂–¥–∞—Ç—å message.client.get_entity (message.to_id)
            lines = []
            detail = []
            —Ç–µ–≥–∏ = []
            —Ä–∞—É–Ω–¥ = 1
            –¥–ª—è —Å—Ç—Ä–æ–∫–∏ –≤ args.splitlines ():
                lines.append (—Å—Ç—Ä–æ–∫–∞)
            –¥–ª—è i –≤ —Å—Ç—Ä–æ–∫–∞—Ö [0] .split (''):
                tags.append (—è)
            –µ—Å–ª–∏ –Ω–µ —Ç–µ–≥–∏ [-1] .startswith ('@'):
                reply = await message.get_reply_message ()
                user = await message.client.get_entity (reply.sender_id)
            –µ—â–µ:
                –µ—Å–ª–∏ —Ç–µ–≥–∏ [0] –≤ –∫–æ–º–∞–Ω–¥–µ:
                    –µ—Å–ª–∏ message.sender_id == me.id:
                        –µ—Å–ª–∏ –Ω–µ —Ç–µ–≥–∏ [-1] [1:]. isdigit ():
                            user = await message.client.get_entity (—Ç–µ–≥–∏ [-1])
                        –µ—â–µ:
                            user = await message.client.get_entity (int (—Ç–µ–≥–∏ [-1] [1:]))
                        lines [0] = lines [0] .rsplit ('', 1) [0]
            –¥–ª—è i –≤ —Å—Ç—Ä–æ–∫–∞—Ö [0] .split ('', maxsplit = 1):
                –µ—Å–ª–∏ —Ä–∞—É–Ω–¥ == 1:
                    detail.append (i)
                –µ—â–µ:
                    detail.append ('' + —è)
                —Ä–∞—É–Ω–¥ + = 1
            –µ—Å–ª–∏ len (–¥–µ—Ç–∞–ª
